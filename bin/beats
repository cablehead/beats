#!/usr/bin/env python

"""
Usage:
    beats init
    beats playlists
    beats playlists create <name> [--private]
    beats playlists delete <id>
    beats playlists show <id>
    beats playlists play <id>
    beats playlists update <id> append <track_id>
    beats playlists update <id> delete <track_id>
    beats tracks show <id>
    beats tracks search <query>
    beats albums show <id>
    beats artists search <query>
    beats artists show <id>
    beats serve
    beats controller next
"""


import getpass
import json
import sys
import os

import requests
import docopt

import beats.store


# TODO: remove
import logging
logging.basicConfig()


__version__ = '0.1'


def truncate(s, l):
    if len(s) > l:
        s = s[:l-3]+'...'
    return s


def to_duration(s):
    ret = ''
    h = s / (60*60)
    s = s % (60*60)
    m = s / 60
    s = s % 60
    if h:
        ret += '%dh' % h
    if m:
        ret += '%dm' % m
    ret += '%ds' % s
    return ret


def test_to_duration():
    assert to_duration(30) == '30s'
    assert to_duration(80) == '1m20s'
    assert to_duration(7520) == '2h5m20s'


def cached(f):
    def wrapped(beats, id):
        id = str(id)
        with store.db('cache', write=True) as cache:
            if id not in cache:
                cache[id] = f(beats, id)
            return cache[id]
    return wrapped


class Controller(object):
    def __init__(self):
        import vanilla
        h = vanilla.Hub()
        self.conn = h.tcp.connect(host='localhost', port=10080)

    def __getattr__(self, name):
        def f(*a, **kw):
            self.conn.send(json.dumps((name, a, kw)))
        return f


class Beats(object):
    URI = 'https://partner.api.beatsmusic.com/v1/api/'

    client_id = 'fxkrj7vemnnxva8jhtqb9wt8'
    client_secret = 'naKEFtfMVHKGfpKeJP89Fs9n'

    def __init__(self, store):
        self.store = store
        with store.db('auth') as auth:
            self.token = auth.get('token')
            self.user_id = auth.get('user_id')

    def auth(self, username, password):
        uri = 'https://partner.api.beatsmusic.com/oauth2/token/password'
        params = {
            'grant_type': 'password',
            'client_id': Beats.client_id,
            'client_secret': Beats.client_secret,
            'username': username,
            'password': password, }
        response = requests.post(uri, params=params)
        return self.response(response)

    def public(self, method, path, params=None):
        if params is None:
            params = {}
        params['client_id'] = Beats.client_id
        response = requests.request(
            method,
            Beats.URI+path,
            params=params)
        return self.response(response)

    def private(self, method, path, params=None):
        response = requests.request(
            method,
            Beats.URI+path,
            params=params,
            headers={'Authorization': 'Bearer %s' % self.token})
        return self.response(response)

    def response(self, response):
        if response.status_code == 200:
            return json.loads(response.text)
        print response
        print response.text

    def activities(self):
        return self.public('GET', 'activities')

    def albums(self, album_id):
        return self.public('GET', 'albums/%s' % album_id)

    def artists(self, artist_id):
        return self.public('GET', 'artists/%s' % artist_id)

    def artists_essential_albums(self, artist_id):
        return self.public('GET', 'artists/%s/essential_albums' % artist_id)

    def artists_tracks(self, artist_id):
        return self.public('GET', 'artists/%s/tracks' % artist_id)

    def artists_playlists(self, artist_id):
        return self.public('GET', 'artists/%s/playlists' % artist_id)

    def artists_editorial_playlists(self, artist_id):
        return self.public('GET', 'artists/%s/editorial_playlists' % artist_id)

    def albums_image(self, album_id):
        return Beats.URI + \
            ('albums/%s/images/default' % album_id) + \
            ('?client_id=%s' % Beats.client_id)

    def me(self):
        return self.private('GET', 'me')['result']

    def playlists_user(self, user_id):
        return self.private('GET', 'users/%s/playlists' % user_id)

    def playlists(self, playlist_id):
        return self.private('GET', 'playlists/%s' % playlist_id)

    def playlists_create(self, name, description=None, access=None):
        # access defaults to 'public'
        params = {'name': name}
        if description:
            params['description'] = description
        if access:
            assert access in ('public', 'private')
            params['access'] = access
        return self.private('POST', 'playlists', params=params)

    def playlists_delete(self, playlist_id):
        return self.private('DELETE', 'playlists/%s' % playlist_id)

    def playlists_image(self, playlist_id):
        return Beats.URI + \
            ('playlists/%s/images/default' % playlist_id) + \
            ('?client_id=%s' % Beats.client_id)

    def playlists_update(self, playlist_id, track_ids):
        params = {
            'playlist_id': playlist_id,
            'track_ids': track_ids, }
        return self.private(
            'PUT', 'playlists/%s/tracks' % playlist_id, params=params)

    def playlists_append(self, playlist_id, track_ids):
        params = {
            'playlist_id': playlist_id,
            'track_ids': track_ids, }
        return self.private(
            'POST', 'playlists/%s/tracks' % playlist_id, params=params)

    @cached
    def tracks(self, track_id):
        return self.public('GET', 'tracks/%s' % track_id)

    def tracks_audio(self, track_id):
        return self.private(
            'GET', 'tracks/%s/audio' % track_id, params={'acquire': 1})

    def search(self, type, query):
        # type: The type of entity for the search.
        # Values: genre, artist, album, track, playlist, user
        return self.public(
            'GET', 'search', params={'type': type, 'q': query, 'limit': 200})


def main(store, argv):

    beats = Beats(store)

    if not beats.token and not argv['init']:
        print "run: 'beats init' first to connect your account"
        return 1

    if argv['init']:
        username = raw_input('beats username: ')
        password = getpass.getpass('beats password: ')
        response = beats.auth(username, password)['result']
        beats.token = response['access_token']
        beats.user_id = beats.me()['user_context']
        with store.db('auth', write=True) as auth:
            auth['token'] = beats.token
            auth['user_id'] = beats.user_id
        return

    if argv['playlists']:
        if argv['update']:
            if argv['append']:
                beats.playlists_append(argv['<id>'], [argv['<track_id>']])
                return

            if argv['delete']:
                id = argv['<id>']
                track_id = argv['<track_id>']
                response = beats.playlists(id)
                current = [x['id'] for x in response['data']['refs']['tracks']]

                if track_id not in current:
                    print '%s not in playlist' % track_id
                    return 1

                current.remove(track_id)
                beats.playlists_update(id, current)
                return
            raise

        if argv['create']:
            beats.playlists_create(
                argv['<name>'],
                description=None,
                access=argv['--private'] and 'private' or 'public')
            return

        if argv['delete']:
            beats.playlists_delete(argv['<id>'])
            return

        if argv['show']:
            response = beats.playlists(argv['<id>'])
            item = response['data']
            # print beats.playlists_image(argv['<id>'])
            print '%-22s%s (%s:%s)' % (
                item['id'],
                item['name'],
                len(item['refs']['tracks']),
                to_duration(item['duration']))
            for track in item['refs']['tracks']:
                extra = beats.tracks(track['id'])['data']
                print '  %-12s %-30s %-30s %s' % (
                    track['id'],
                    truncate(extra['artist_display_name'], 30),
                    truncate(track['display'], 30),
                    to_duration(extra['duration']))
            return

        if argv['play']:
            response = beats.playlists(argv['<id>'])
            track_ids = [x['id'] for x in response['data']['refs']['tracks']]
            import vanilla
            h = vanilla.Hub()
            conn = h.tcp.connect(host='localhost', port=10080)
            conn.send(json.dumps(track_ids))
            conn.close()
            return

        response = beats.playlists_user(beats.user_id)
        for item in reversed(
                sorted(response['data'], key=lambda x: x['updated_at'])):
            print '%-22s%s (%s:%s)' % (
                item['id'],
                item['name'],
                len(item['refs']['tracks']),
                to_duration(item['duration']))

    if argv['tracks']:
        if argv['search']:
            data = beats.search('track', argv['<query>'])['data']
            for item in data:
                print '%-14s %-32s %s' % (
                    item['id'],
                    truncate(item['display'], 31),
                    item['detail'])
            return

        if argv['show']:
            id = argv['<id>']

            data = beats.tracks(id)['data']
            for key, value in data['refs'].iteritems():
                if key == 'album':
                    data[key] = {
                        'id': value['id'], 'display': value['display']}
                elif key == 'artists':
                    data[key] = [
                        {'id': x['id'], 'display': x['display']}
                        for x in value]
                else:
                    raise Exception(key)
            del data['refs']

            print data

            """
            import vanilla
            h = vanilla.Hub()
            conn = h.tcp.connect(host='localhost', port=10080)
            conn.send(json.dumps([id]))
            conn.close()
            """

    if argv['albums']:
        if argv['show']:
            print beats.albums_image(argv['<id>'])
            return

    if argv['artists']:
        if argv['show']:
            print beats.artists(argv['<id>'])
            data = beats.artists_tracks(argv['<id>'])['data']
            for item in data:
                print "   ", item

            ids = [item['id'] for item in data]
            Controller().play(ids)
            return

        if argv['search']:
            data = beats.search('artist', argv['<query>'])['data']
            for item in data:
                name = item['display']
                s = '%-14s %-32s %s' % (item['id'], name, item['detail'])
                print s
        return

    if argv['controller']:
        if argv['next']:
            Controller().play_next()
        return

    if argv['serve']:
        import vanilla

        h = vanilla.Hub()

        class API(object):
            def __init__(self):
                self.q = []
                self.controller = h.router()
                self.commands = h.broadcast()

                @h.spawn
                def _():
                    for data in self.controller.recver:
                        print data
                        name, a, kw = json.loads(data)
                        getattr(self, name)(*a, **kw)

            def play(self, ids):
                self.q = ids
                self.play_next()

            def play_next(self):
                if self.q:
                    id = self.q.pop(0)
                    print beats.tracks(id)
                    audio = beats.tracks_audio(id)
                    data = json.dumps({
                        'id': id,
                        'host': audio['data']['location'],
                        'asset': audio['data']['resource'], })
                    self.commands.send(data)

        api = API()

        b = h.bean(host='0.0.0.0', port=8080)
        b.static('/', 'serve/index.html')
        b.static('/swf', 'serve/swf')
        b.static('/script', 'serve/script')
        b.static('/css', 'serve/css')

        serve = h.tcp.listen(host='localhost', port=10080)

        @serve.consume
        def _(conn):
            api.controller.send(conn.recv())
            conn.close()

        @b.websocket('/')
        def _(ws):
            ws.pipe(api.controller)

            commands = api.commands.subscribe()

            for command in commands:
                ws.send(command)

        print 'listening on on http://0.0.0.0:8080'
        h.stop_on_term()


if __name__ == '__main__':
    store = beats.store.Store(os.path.expanduser('~/.beats'))
    argv = docopt.docopt(__doc__, version=__version__)
    sys.exit(main(store, argv))
